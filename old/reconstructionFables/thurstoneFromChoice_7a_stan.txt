data {
  int<lower=1> nStimuli;                         // Number of unique stimuli
  int<lower=1> nTrials;                          // Number of trials
  array[nTrials] int<lower=1, upper=nStimuli> s; // Stimulus index for each trial
  vector[nTrials] y;                             // Observed responses
}
parameters {
  // mu[2] ~ dunif(0, pi/2). Uses built-in Stan constant pi()
  real<lower=0, upper=pi()/2> mu_2;
  
  // mu[3] to mu[nStimuli] ~ dunif(0, pi). Uses vector syntax.
  vector<lower=0, upper=pi()>[nStimuli - 2] mu_others; 
  
  // sigma ~ dunif(0, pi)
  real<lower=0, upper=pi()> sigma;
}
transformed parameters {
  vector[nStimuli] mu;
  mu[1] = 0;              // Order constraints for identifiability
  mu[2] = mu_2;
  
  // Assemble the remaining mu parameters using vector slicing
  mu[3:nStimuli] = mu_others; 
}
model {
  // Priors are implicit via constraints
  
  // Likelihood: Vectorized for efficiency
  // y[t] ~ normal(mu[s[t]], sigma)
  y ~ normal(mu[s], sigma);
}